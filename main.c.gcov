        -:    0:Source:main.c
        -:    0:Graph:a-main.gcno
        -:    0:Data:a-main.gcda
        -:    0:Runs:2
        -:    1:#include "gps.h"
        -:    2:
        2:    3:int main () {
        -:    4:
        -:    5:    char input_file_name [100];
        -:    6:    char input_file_name_2 [100];
        -:    7:    int arr_1_len;
        -:    8:    int arr_2_len;
        -:    9:    Coordinate* array1;
        -:   10:    Coordinate* array2;
        -:   11:
        -:   12:// ============ ARRAY 1 ============
        2:   13:    printf("Array 1:\n");
        -:   14:    // Prompt user for input method
        -:   15:    int input_method;
        2:   16:    printf("Enter '1' to input coordinates manually, or '2' to read from a .csv file: ");
        2:   17:    scanf("%d", &input_method);
        2:   18:    if (input_method != 1 && input_method != 2) {
    #####:   19:        printf("Please enter '1' for manual input or '2' to read from a .csv file.\n");
    #####:   20:        return 1;
        -:   21:    }
        2:   22:    if (input_method == 2) {
        -:   23:        // Get input file name
        1:   24:        printf("Make sure the .csv file is in the current directory. Enter the name of the .csv file: ");
        1:   25:        scanf("%s", input_file_name);
        -:   26:
        -:   27:        // Open input file for reading
        1:   28:        FILE* input_file = fopen(input_file_name, "r");
        1:   29:        if (input_file == NULL) {
    #####:   30:            printf("Error opening file. Make sure filename is spelled correctly and the file is located in the current directory.\n");
    #####:   31:            return 1;
        -:   32:        } else {
        1:   33:            printf("File opened successfully.\n");
        -:   34:        }
        -:   35:
        -:   36:        // Parse .csv file
        -:   37:            // First row: try to find features named "latitude" and "longitude" (or variants). 
        -:   38:            //  If found, read the corresponding columns. If not, prompt user to enter which columns they are.
        -:   39:        
        -:   40:        char buffer [1024];
        -:   41:        char* data;
        1:   42:        int lat_col = -1, lon_col = -1;
        1:   43:        int row_count = 0, tot_cols = 0, current_col = 0;
        1:   44:        int first_row_is_data = -1;     // -1 = not determined, 0 = features, 1 = data
        -:   45:
        1:   46:        fgets(buffer, 1024, input_file);    // Read line
        -:   47:        // get total number of columns
        -:   48:        // get lat/long column number if exists (0 index!)
        1:   49:        data = strtok(buffer, ",");
        5:   50:        while (data != NULL) {
        4:   51:            data = trim(data);
        -:   52:
        4:   53:            if (strcmp(data, "\"latitude\"") == 0 || 
        4:   54:                strcmp(data, "\"Latitude\"") == 0 || 
        4:   55:                strcmp(data, "\"lat\"") == 0 || 
        4:   56:                strcmp(data, "\"Lat\"") == 0 ||
        4:   57:                strcmp(data, "latitude") == 0 || 
        4:   58:                strcmp(data, "Latitude") == 0 || 
        4:   59:                strcmp(data, "lat") == 0 || 
        3:   60:                strcmp(data, "Lat") == 0 
        -:   61:                ) {
        1:   62:                lat_col = current_col;
        3:   63:            } else if ( strcmp(data, "\"longitude\"") == 0 || 
        3:   64:                        strcmp(data, "\"Longitude\"") == 0 || 
        3:   65:                        strcmp(data, "\"lon\"") == 0 || 
        3:   66:                        strcmp(data, "\"Lon\"") == 0 || 
        3:   67:                        strcmp(data, "\"lng\"") == 0 || 
        3:   68:                        strcmp(data, "\"Lng\"") == 0 ||
        3:   69:                        strcmp(data, "\"long\"") == 0 ||
        3:   70:                        strcmp(data, "\"Long\"") == 0 ||
        3:   71:                        strcmp(data, "longitude") == 0 || 
        3:   72:                        strcmp(data, "Longitude") == 0 || 
        3:   73:                        strcmp(data, "lon") == 0 || 
        3:   74:                        strcmp(data, "Lon") == 0 || 
        3:   75:                        strcmp(data, "lng") == 0 || 
        2:   76:                        strcmp(data, "Lng") == 0 ||
        2:   77:                        strcmp(data, "long") == 0 ||
        2:   78:                        strcmp(data, "Long") == 0
        -:   79:                        ) {
        1:   80:                lon_col = current_col;
        -:   81:            }
        4:   82:            data = strtok(NULL, ",");   // to tokenize the same string to get the next token
        4:   83:            current_col++;
        4:   84:            tot_cols++;
        -:   85:        }
        1:   86:        printf("Latitude column: %d\n", lat_col);
        1:   87:        printf("Longitude column: %d\n", lon_col);
        1:   88:        printf("Total columns: %d\n", tot_cols);
        -:   89:        
        -:   90:        // If lat/long columns not found, prompt user to enter them
        1:   91:        if (lat_col == -1 || lon_col == -1) {
    #####:   92:            printf("Could not find latitude and longitude columns. Please enter the column numbers for latitude and longitude, separated by a space (The first column is \"1,\" etc.): ");
    #####:   93:            scanf("%d %d", &lat_col, &lon_col);
        -:   94:        }
        -:   95:
        -:   96:        // Count number of rows !!!!!!!!!!!-----------MIGHT BE WRONG-----------------!!!!!!!!!!!!!
   151540:   97:        while (fgets(buffer, 1024, input_file)) {
   151539:   98:            row_count++;
        -:   99:        }
        1:  100:        printf("Number of rows: %d\n", row_count);  
        -:  101:
        -:  102:
        -:  103:        // Parse data
        -:  104:        // If first row is data and not features, start there. Else start 2nd row.
        -:  105:        // Detect valid coordinate, then determine if 1st row is data. Then insert into data struture.   
        1:  106:        rewind(input_file);
   151540:  107:        for (int i = 0; i < row_count; i++) {}
        -:  108:
        -:  109:        // Determine if 1st row is data or features
        1:  110:        fgets(buffer, 1024, input_file);    // Read line
        1:  111:        printf("========== Determine first row data or features ==========\n");
        -:  112:        //printf("Buffer: %s", buffer);
        1:  113:        data = strtok(buffer, ",");         // Tokenize 1st field
        -:  114:        
        5:  115:        while (data != NULL) {
        4:  116:            data = trim(data);
        4:  117:            if (checkValidLatitude(data) != 200 || checkValidLongitude(data) != 200) {
        -:  118:                // We've hit a coordinate. First row is data, not features.
    #####:  119:                first_row_is_data = 1;
    #####:  120:                rewind(input_file); // Start from the beginning
    #####:  121:                break;
        -:  122:            };
        4:  123:            data = strtok(NULL, ",");   // to tokenize the same string to get the next token
        4:  124:            first_row_is_data = 0;      // First row is features
        -:  125:        }
        1:  126:        rewind(input_file);
        1:  127:        printf("First row is data: %d\n", first_row_is_data);
        1:  128:        printf("==========================================================\n");
        -:  129:
        -:  130:        
        -:  131:        // The data structure is an array of Coordinates (row #, lat, lon)
        1:  132:        array1 = malloc (row_count * sizeof(Coordinate));
        1:  133:        arr_1_len = row_count;
        -:  134:        
        -:  135:
        -:  136:        // If 1st row is data, we start parsing from the 1st row. If not, we start from the 2nd row.
        1:  137:        if (first_row_is_data) {
    #####:  138:            fgets(buffer, 1024, input_file);    // Go to 2nd line if 1st row is data
        -:  139:        }
        -:  140:
        -:  141:        // Parse data
        -:  142:        int first_col_to_read, last_col_to_read, lat_first;
        1:  143:        if (lat_col > lon_col) {
    #####:  144:            last_col_to_read = lat_col;
    #####:  145:            first_col_to_read = lon_col;
    #####:  146:            lat_first = 0;
        -:  147:        } else {
        1:  148:            last_col_to_read = lon_col;
        1:  149:            first_col_to_read = lat_col;
        1:  150:            lat_first = 1;
        -:  151:        }
        -:  152:
        -:  153:        //for (int i = 0; i < row_count; i++) {       // For each row
       11:  154:        for (int i = 0; i < 10; i++) {       // For 10 rows
       10:  155:            fgets(buffer, 1024, input_file);        // read line
       10:  156:            data = strtok(buffer, ",");             // Tokenize 1st field
        -:  157:            //printf("Data1: %s\n", data);
       20:  158:            for (int j = 0; j < first_col_to_read - 1; j++) {   // strtok number of times until first_col_to_read (alr strtok'd once)
        -:  159:                
        -:  160:                    //data = trim(data);
       10:  161:                    data = strtok(NULL, ",");       // to tokenize the same string to get the next token
        -:  162:                    //printf("Data2: %s\n", data);
        -:  163:                
        -:  164:            }   
        -:  165:            
        -:  166:            // strtok should now be on the right spot for the first lat/long value
       10:  167:            data = trim(data);
       10:  168:            data = strtok(NULL, ",");
        -:  169:            //printf("Lat/long: %s\n", data);
       10:  170:            if (lat_first) {
       10:  171:                array1[i].latitude = checkValidLatitude(data);
        -:  172:            } else {
    #####:  173:                array1[i].longitude = checkValidLongitude(data);
        -:  174:            }
       10:  175:            array1[i].row_num = i+1;
        -:  176:            
        -:  177:            // get to 2nd value to read, but reading takes 1
      10*:  178:            for (int j = 0; j < last_col_to_read - first_col_to_read - 1; j++) {    
    #####:  179:                data = strtok(NULL, ",");
        -:  180:            }
        -:  181:            
        -:  182:            // strtok should now be on the right spot for the second lat/long value
       10:  183:            data = trim(data);
       10:  184:            data = strtok(NULL, ",");
        -:  185:            //printf("Lat/long: %s\n", data);
       10:  186:            if (!lat_first) {
    #####:  187:                array1[i].latitude = checkValidLatitude(data);
        -:  188:            } else {
       10:  189:                array1[i].longitude = checkValidLongitude(data);
        -:  190:            }
       10:  191:            array1[i].row_num = i+1;
        -:  192:        }
        -:  193:
        -:  194:
        -:  195:        // Print first 10 rows data structure
       11:  196:        for (int i = 0; i < 10; i++) {
       10:  197:            printf("Row %d: %f, %f\n", array1[i].row_num, array1[i].latitude, array1[i].longitude);
        -:  198:        }
        -:  199:
        -:  200:
        1:  201:        fclose(input_file);
        -:  202:
        1:  203:    } else if (input_method == 1) {
        -:  204:
        -:  205:        double lat, lon;
        -:  206:        int arr_len;
        -:  207:        double temp_lat, temp_lon;
        -:  208:
        -:  209:        // Prompt user for coordinates
        1:  210:        printf("How many coordinates do you want to enter?\n");
        1:  211:        scanf("%d", &arr_len);
        1:  212:        while (arr_len < 1) {
    #####:  213:            printf("Please enter a number greater than 0:\n");
    #####:  214:            scanf("%d", &arr_len);
        -:  215:        }
        1:  216:        array1 = malloc (arr_len * sizeof(struct Coordinate));
        1:  217:        arr_1_len = arr_len;
        -:  218:
        1:  219:        int count = 0;
        1:  220:        int len = arr_len;
        3:  221:        while (len > 0) {
        2:  222:            printf("Please enter a latitude in decimal degrees:\n");
        2:  223:            scanf("%lf", &temp_lat);
        2:  224:            printf("Array 1: Please enter a longitude in decimal degrees:\n");
        2:  225:            scanf("%lf", &temp_lon);
        2:  226:            array1[count].row_num = count + 1;
        2:  227:            array1[count].latitude = temp_lat;
        2:  228:            array1[count].longitude = temp_lon;
        2:  229:            len--;
        2:  230:            count++;
        -:  231:        }
        -:  232:    }
        -:  233:
        -:  234:
        -:  235:
        -:  236:
        -:  237:
        -:  238:    // ============ ARRAY 2 ============
        2:  239:    printf("Array 2\n");
        -:  240:    // Prompt user for input method
        -:  241:    //int input_method;
        2:  242:    printf("Enter '1' to input coordinates manually, or '2' to read from a .csv file: ");
        2:  243:    scanf("%d", &input_method);
        2:  244:    if (input_method != 1 && input_method != 2) {
    #####:  245:        printf("Please enter '1' for manual input or '2' to read from a .csv file.\n");
    #####:  246:        return 1;
        -:  247:    }
        2:  248:    if (input_method == 2) {
        -:  249:        // Get input file name
        1:  250:        printf("Make sure the .csv file is in the current directory. Enter the name of the .csv file: ");
        1:  251:        scanf("%s", input_file_name);
        -:  252:
        -:  253:        // Open input file for reading
        1:  254:        FILE* input_file = fopen(input_file_name, "r");
        1:  255:        if (input_file == NULL) {
    #####:  256:            printf("Error opening file. Make sure filename is spelled correctly and the file is located in the current directory.\n");
    #####:  257:            return 1;
        -:  258:        } else {
        1:  259:            printf("File opened successfully.\n");
        -:  260:        }
        -:  261:
        -:  262:        // Parse .csv file
        -:  263:            // First row: try to find features named "latitude" and "longitude" (or variants). 
        -:  264:            //  If found, read the corresponding columns. If not, prompt user to enter which columns they are.
        -:  265:        
        -:  266:        char buffer [1024];
        -:  267:        char* data;
        1:  268:        int lat_col = -1, lon_col = -1;
        1:  269:        int row_count = 0, tot_cols = 0, current_col = 0;
        1:  270:        int first_row_is_data = -1;     // -1 = not determined, 0 = features, 1 = data
        -:  271:
        1:  272:        fgets(buffer, 1024, input_file);    // Read line
        -:  273:        // get total number of columns
        -:  274:        // get lat/long column number if exists (0 index!)
        1:  275:        data = strtok(buffer, ",");
        5:  276:        while (data != NULL) {
        4:  277:            data = trim(data);
        -:  278:
        4:  279:            if (strcmp(data, "\"latitude\"") == 0 || 
        4:  280:                strcmp(data, "\"Latitude\"") == 0 || 
        4:  281:                strcmp(data, "\"lat\"") == 0 || 
        4:  282:                strcmp(data, "\"Lat\"") == 0 ||
        4:  283:                strcmp(data, "latitude") == 0 || 
        4:  284:                strcmp(data, "Latitude") == 0 || 
        4:  285:                strcmp(data, "lat") == 0 || 
        3:  286:                strcmp(data, "Lat") == 0 
        -:  287:                ) {
        1:  288:                lat_col = current_col;
        3:  289:            } else if ( strcmp(data, "\"longitude\"") == 0 || 
        3:  290:                        strcmp(data, "\"Longitude\"") == 0 || 
        3:  291:                        strcmp(data, "\"lon\"") == 0 || 
        3:  292:                        strcmp(data, "\"Lon\"") == 0 || 
        3:  293:                        strcmp(data, "\"lng\"") == 0 || 
        3:  294:                        strcmp(data, "\"Lng\"") == 0 ||
        3:  295:                        strcmp(data, "\"long\"") == 0 ||
        3:  296:                        strcmp(data, "\"Long\"") == 0 ||
        3:  297:                        strcmp(data, "longitude") == 0 || 
        3:  298:                        strcmp(data, "Longitude") == 0 || 
        3:  299:                        strcmp(data, "lon") == 0 || 
        3:  300:                        strcmp(data, "Lon") == 0 || 
        3:  301:                        strcmp(data, "lng") == 0 || 
        2:  302:                        strcmp(data, "Lng") == 0 ||
        2:  303:                        strcmp(data, "long") == 0 ||
        2:  304:                        strcmp(data, "Long") == 0
        -:  305:                        ) {
        1:  306:                lon_col = current_col;
        -:  307:            }
        4:  308:            data = strtok(NULL, ",");   // to tokenize the same string to get the next token
        4:  309:            current_col++;
        4:  310:            tot_cols++;
        -:  311:        }
        1:  312:        printf("Latitude column: %d\n", lat_col);
        1:  313:        printf("Longitude column: %d\n", lon_col);
        1:  314:        printf("Total columns: %d\n", tot_cols);
        -:  315:        
        -:  316:        // If lat/long columns not found, prompt user to enter them
        1:  317:        if (lat_col == -1 || lon_col == -1) {
    #####:  318:            printf("Could not find latitude and longitude columns. Please enter the column numbers for latitude and longitude, separated by a space (The first column is \"1,\" etc.): ");
    #####:  319:            scanf("%d %d", &lat_col, &lon_col);
        -:  320:        }
        -:  321:
        -:  322:        // Count number of rows !!!!!!!!!!!-----------MIGHT BE WRONG-----------------!!!!!!!!!!!!!
   151540:  323:        while (fgets(buffer, 1024, input_file)) {
   151539:  324:            row_count++;
        -:  325:        }
        1:  326:        printf("Number of rows: %d\n", row_count);  
        1:  327:        arr_2_len = row_count;
        -:  328:
        -:  329:
        -:  330:        // Parse data
        -:  331:        // If first row is data and not features, start there. Else start 2nd row.
        -:  332:        // Detect valid coordinate, then determine if 1st row is data. Then insert into data struture.   
        1:  333:        rewind(input_file);
   151540:  334:        for (int i = 0; i < row_count; i++) {}
        -:  335:
        -:  336:        // Determine if 1st row is data or features
        1:  337:        fgets(buffer, 1024, input_file);    // Read line
        1:  338:        printf("========== Determine first row data or features ==========\n");
        -:  339:        //printf("Buffer: %s", buffer);
        1:  340:        data = strtok(buffer, ",");         // Tokenize 1st field
        -:  341:        
        5:  342:        while (data != NULL) {
        4:  343:            data = trim(data);
        4:  344:            if (checkValidLatitude(data) != 200 || checkValidLongitude(data) != 200) {
        -:  345:                // We've hit a coordinate. First row is data, not features.
    #####:  346:                first_row_is_data = 1;
    #####:  347:                rewind(input_file); // Start from the beginning
    #####:  348:                break;
        -:  349:            };
        4:  350:            data = strtok(NULL, ",");   // to tokenize the same string to get the next token
        4:  351:            first_row_is_data = 0;      // First row is features
        -:  352:        }
        1:  353:        rewind(input_file);
        1:  354:        printf("First row is data: %d\n", first_row_is_data);
        1:  355:        printf("==========================================================\n");
        -:  356:
        -:  357:        
        -:  358:        // The data structure is an array of Coordinates (row #, lat, lon)
        1:  359:        array2 = malloc (row_count * sizeof(Coordinate));
        -:  360:        
        -:  361:
        -:  362:        // If 1st row is data, we start parsing from the 1st row. If not, we start from the 2nd row.
        1:  363:        if (first_row_is_data) {
    #####:  364:            fgets(buffer, 1024, input_file);    // Go to 2nd line if 1st row is data
        -:  365:        }
        -:  366:
        -:  367:        // Parse data
        -:  368:        int first_col_to_read, last_col_to_read, lat_first;
        1:  369:        if (lat_col > lon_col) {
    #####:  370:            last_col_to_read = lat_col;
    #####:  371:            first_col_to_read = lon_col;
    #####:  372:            lat_first = 0;
        -:  373:        } else {
        1:  374:            last_col_to_read = lon_col;
        1:  375:            first_col_to_read = lat_col;
        1:  376:            lat_first = 1;
        -:  377:        }
        -:  378:
        -:  379:        //for (int i = 0; i < row_count; i++) {       // For each row
       11:  380:        for (int i = 0; i < 10; i++) {       // For 10 rows
       10:  381:            fgets(buffer, 1024, input_file);        // read line
       10:  382:            data = strtok(buffer, ",");             // Tokenize 1st field
        -:  383:            //printf("Data1: %s\n", data);
       20:  384:            for (int j = 0; j < first_col_to_read - 1; j++) {   // strtok number of times until first_col_to_read (alr strtok'd once)
        -:  385:                
        -:  386:                    //data = trim(data);
       10:  387:                    data = strtok(NULL, ",");       // to tokenize the same string to get the next token
        -:  388:                    //printf("Data2: %s\n", data);
        -:  389:                
        -:  390:            }   
        -:  391:            
        -:  392:            // strtok should now be on the right spot for the first lat/long value
       10:  393:            data = trim(data);
       10:  394:            data = strtok(NULL, ",");
        -:  395:            //printf("Lat/long: %s\n", data);
       10:  396:            if (lat_first) {
       10:  397:                array2[i].latitude = checkValidLatitude(data);
        -:  398:            } else {
    #####:  399:                array2[i].longitude = checkValidLongitude(data);
        -:  400:            }
       10:  401:            array2[i].row_num = i+1;
        -:  402:            
        -:  403:            // get to 2nd value to read, but reading takes 1
      10*:  404:            for (int j = 0; j < last_col_to_read - first_col_to_read - 1; j++) {    
    #####:  405:                data = strtok(NULL, ",");
        -:  406:            }
        -:  407:            
        -:  408:            // strtok should now be on the right spot for the second lat/long value
       10:  409:            data = trim(data);
       10:  410:            data = strtok(NULL, ",");
        -:  411:            //printf("Lat/long: %s\n", data);
       10:  412:            if (!lat_first) {
    #####:  413:                array2[i].latitude = checkValidLatitude(data);
        -:  414:            } else {
       10:  415:                array2[i].longitude = checkValidLongitude(data);
        -:  416:            }
       10:  417:            array2[i].row_num = i+1;
        -:  418:        }
        -:  419:
        -:  420:
        -:  421:        // Print first 10 rows data structure
       11:  422:        for (int i = 0; i < 10; i++) {
       10:  423:            printf("Row %d: %f, %f\n", array2[i].row_num, array2[i].latitude, array2[i].longitude);
        -:  424:        }
        -:  425:
        -:  426:
        1:  427:        fclose(input_file);
        -:  428:
        1:  429:    } else if (input_method == 1) {
        -:  430:
        -:  431:        double lat, lon;
        -:  432:        int arr_len;
        -:  433:        double temp_lat, temp_lon;
        -:  434:
        -:  435:        // Prompt user for coordinates
        1:  436:        printf("How many coordinates do you want to enter?\n");
        1:  437:        scanf("%d", &arr_len);
        1:  438:        while (arr_len < 1) {
    #####:  439:            printf("Please enter a number greater than 0:\n");
    #####:  440:            scanf("%d", &arr_len);
        -:  441:        }
        1:  442:        array2 = malloc (arr_len * sizeof(struct Coordinate));
        1:  443:        arr_2_len = arr_len;
        -:  444:
        1:  445:        int count = 0;
        1:  446:        int len = arr_len;
        3:  447:        while (len > 0) {
        2:  448:            printf("Please enter a latitude in decimal degrees:\n");
        2:  449:            scanf("%lf", &temp_lat);
        2:  450:            printf("Array 1: Please enter a longitude in decimal degrees:\n");
        2:  451:            scanf("%lf", &temp_lon);
        2:  452:            array2[count].row_num = count + 1;
        2:  453:            array2[count].latitude = temp_lat;
        2:  454:            array2[count].longitude = temp_lon;
        2:  455:            len--;
        2:  456:            count++;
        -:  457:        }
        -:  458:    }
        -:  459:
        -:  460:
        -:  461:    // For each location in array one, calculate the distance to each location in array two. Smallest distance wins. 
   151543:  462:    for (int i = 0; i < arr_1_len; i++) {
   151541:  463:        double minDist = 99999;     // 12,756 farthest distance on Earth
        -:  464:        int closest_location;
   757697:  465:        for (int j = 0; j < arr_2_len; j++) {
   606156:  466:            double dist = haversine(array1[i], array2[j]);
   606156:  467:            if (dist < minDist) {
        -:  468:                //printf("%lf", dist);
   151547:  469:                minDist = dist;
   151547:  470:                closest_location = j;
        -:  471:            }
        -:  472:        }
   151541:  473:        printf("Location %d in array 1 is closest to location %d in array 2\n", array1[i].row_num, array2[closest_location].row_num);
        -:  474:    }
        -:  475:
        2:  476:    return 0;
        -:  477:}
        -:  478:
        -:  479:
